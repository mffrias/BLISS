classpath = ${jpf-symbc-bounded}/build/examples
sourcepath = ${jpf-symbc-bounded}/src/examples

target = symbolicheap.bounded.AvlTree
symbolic.method = symbolicheap.bounded.AvlTree.concreteRepOK(con);

#----------------------------------------------------------------------
symbolic.green = false
symbolic.solver.slicing = true
symbolic.solver.canonization = true
symbolic.solver.dp = cvc3
symbolic.solver.mc = latte
symbolic.solver.mc.tool = /Users/jaco/Documents/workspace/jpf-probsym/lib/count.osx2
symbolic.solver.store = redis

#----------------------------------------------------------------------
symbolic.dp = cvc3
symbolic.lazy = true
symbolic.bounded = true
symbolic.lazy.subtypes = true
symbolic.lazy.refine = true
symbolic.lazy.bounddb = ${sourcepath}/symbolicheap/bounded/bounddb/AvlTree-08.txt
symbolic.lazy.limit = 8
symbolic.lazy.useauxsolver = true
symbolic.lazy.satdb = false
symbolic.lazy.useauxsolver.debug = false
symbolic.lazy.pvarsdb = ${sourcepath}/symbolicheap/bounded/bounddb/AvlTree-08.pvars
#symbolic.debug=off
#----------------------------------------------------------------------
#vm.insn_factory.class = gov.nasa.jpf.symbc.SymbolicInstructionFactory
vm.insn_factory.class = gov.nasa.jpf.symbc.SymbolicInstructionFactoryBounded
vm.storage.class=nil
listener = gov.nasa.jpf.symbc.heap.bounded.HeapSymbolicListenerBounded3
#vm.insn_factory.class = gov.nasa.jpf.symbc.SymbolicInstructionFactory
vm.insn_factory.class = gov.nasa.jpf.symbc.SymbolicInstructionFactoryBounded

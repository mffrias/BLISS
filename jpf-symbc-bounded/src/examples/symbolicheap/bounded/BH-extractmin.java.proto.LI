package symbolicheap.bounded;

import gov.nasa.jpf.symbc.Debug;

import java.util.LinkedList;

public class BH {

	public int key;
	public int degree; // depth of the binomial tree having the current node as its root
	public BH parent;  // pointer to the parent of the current node
	public BH left;   // pointer to the first child of the current node
	public BH right; // pointer to the next binomial tree in the list
	public static int size;
	
	public BH(int key, int degree) {
		this.key = key;
		this.degree = degree;
		parent = right = left = null;
	}
	
	public BH(){}

	public static final BH SYMBOLICOBJ = new BH(); //field added to execute the hybridRepOK.
	public static final int SYMBOLICINT = (int) Integer.MIN_VALUE; //field added to execute the hybridRepOK.


	public BH parent()   { return parent;  }
	public BH sibling()  { return right;   }
	public BH child()    { return left;    }
	public int degree()  { return degree;  }
    public int key()     { return key;     }
    public int size()    { return size;    } 

	public boolean repOK_Concrete(BH root) {
	
		final LinkedList<BH> seen = new LinkedList<BH>();

		if (root!=null) {

			// son aciclicos los hijos de root?
			if (!isAcyclic(root, seen))
				return false;
			
			// esta ordenado el arbol que cuelga de root?
			if (!ordered(root))
				return false;

			// el parent de root es null?
			if (root.parent()!=null)
				return false;
			
			// si hay un root.sibling, el degree de root es menor
			if (root.sibling()!=null) {
				if (root.degree() >= root.sibling().degree())
					return false;
			}
			
			// los ns son los siblings de root
			BH ns = root.sibling();

		    while (ns != null) {

		    	// son aciclicos los hijos del sibling de root
				  if (!isAcyclic(ns, seen))
				     return false;
		    	  
		    	  // es parent del sibling de root es null?
		    	  if (ns.parent()!=null)
		    		  return false;
		    	  
		    	  // el degree de este sibling es menor al del siguiente?
		    	  if (ns.sibling()!=null) {
		    		  if (ns.degree()>=ns.sibling().degree())
		    			  return false;
		    	  }
		    	  
		    	  // estan ordenados el subarbol que cuelga de este sibling?
		    	  if (!ordered(ns))
		    		  return false;

		    	  // proximo sibling de root
		    	  ns = ns.sibling();
		      }
			
		}
		
		//if (size != seen.size())
		//	return false;
			
		//return true;
		size = seen.size();
		return size <= LIMIT;
	}

	
	
	public boolean repOK_ConcretePost(BH root) {
		
		final LinkedList<BH> seen = new LinkedList<BH>();

		if (root!=null) {

			// son aciclicos los hijos de root?
			if (!isAcyclic(root, seen))
				return false;
			
			// esta ordenado el arbol que cuelga de root?
			if (!ordered(root))
				return false;

			// el parent de root es null?
			if (root.parent()!=null)
				return false;
			
			// si hay un root.sibling, el degree de root es menor
			if (root.sibling()!=null) {
				if (root.degree() >= root.sibling().degree())
					return false;
			}
			
			// los ns son los siblings de root
			BH ns = root.sibling();

		    while (ns != null) {

		    	// son aciclicos los hijos del sibling de root
				  if (!isAcyclic(ns, seen))
				     return false;
		    	  
		    	  // es parent del sibling de root es null?
		    	  if (ns.parent()!=null)
		    		  return false;
		    	  
		    	  // el degree de este sibling es menor al del siguiente?
		    	  if (ns.sibling()!=null) {
		    		  if (ns.degree()>=ns.sibling().degree())
		    			  return false;
		    	  }
		    	  
		    	  // estan ordenados el subarbol que cuelga de este sibling?
		    	  if (!ordered(ns))
		    		  return false;

		    	  // proximo sibling de root
		    	  ns = ns.sibling();
		      }
			
		}
		
		return true;
	}

	
	public boolean hybridRepOK() {
		BH root = this;
		
		final LinkedList<BH> seen = new LinkedList<BH>();

		if (root != SYMBOLICOBJ){
			
			if (root!=null) {
	
				// son aciclicos los hijos de root?
				if (!isAcyclic(root, seen))
					return false;
				
				// esta ordenado el arbol que cuelga de root?
				if (!ordered(root))
					return false;
	
				// el parent de root es null?
				if (root.parent() != SYMBOLICOBJ && root.parent()!=null)
					return false;
				
				// si hay un root.sibling, el degree de root es menor
				if (root.sibling() != SYMBOLICOBJ && root.sibling()!=null) {
					if (root.degree() != SYMBOLICINT && root.sibling().degree() != SYMBOLICINT && root.degree() >= root.sibling().degree())
						return false;
				}
				
				// los ns son los siblings de root
				BH ns = root.sibling();
	
			    while (ns != null && ns != SYMBOLICOBJ) {
	
			    	// son aciclicos los hijos del sibling de root
					  if (!isAcyclic(ns, seen))
					     return false;
			    	  
			    	  // es parent del sibling de root es null?
			    	  if (ns.parent()!=SYMBOLICOBJ && ns.parent()!=null)
			    		  return false;
			    	  
			    	  // el degree de este sibling es menor al del siguiente?
			    	  if (ns.sibling()!=SYMBOLICOBJ && ns.sibling()!=null) {
			    		  if (ns.degree()>=ns.sibling().degree())
			    			  return false;
			    	  }
			    	  
			    	  // estan ordenados el subarbol que cuelga de este sibling?
			    	  if (!ordered(ns))
			    		  return false;
	
			    	  // proximo sibling de root
			    	  ns = ns.sibling();
			      }
				
			}
			
			//if (size != seen.size())
			//	return false;
				
			//return true;
			size = seen.size();
			return size <= LIMIT;
		} else {
			return true;
		}
	}
	
	
	
//	//this other repOk does not set the value of size, but
//	//rather reads its value.
//	public boolean repOK_Concrete2(BH root) {
//		
//		final LinkedList<BH> seen = new LinkedList<BH>();
//
//		if (root!=null) {
//
//			// son aciclicos los hijos de root?
//			if (!isAcyclic(root, seen))
//				return false;
//			
//			// esta ordenado el arbol que cuelga de root?
//			if (!ordered(root))
//				return false;
//
//			// el parent de root es null?
//			if (root.parent()!=null)
//				return false;
//			
//			// si hay un root.sibling, el degree de root es menor
//			if (root.sibling()!=null) {
//				if (root.degree() >= root.sibling().degree())
//					return false;
//			}
//			
//			// los ns son los siblings de root
//			BH ns = root.sibling();
//
//		    while (ns != null) {
//
//		    	// son aciclicos los hijos del sibling de root
//				  if (!isAcyclic(ns, seen))
//				     return false;
//		    	  
//		    	  // es parent del sibling de root es null?
//		    	  if (ns.parent()!=null)
//		    		  return false;
//		    	  
//		    	  // el degree de este sibling es menor al del siguiente?
//		    	  if (ns.sibling()!=null) {
//		    		  if (ns.degree()>=ns.sibling().degree())
//		    			  return false;
//		    	  }
//		    	  
//		    	  // estan ordenados el subarbol que cuelga de este sibling?
//		    	  if (!ordered(ns))
//		    		  return false;
//
//		    	  // proximo sibling de root
//		    	  ns = ns.sibling();
//		      }
//			
//		}
//		
//		//if (size != seen.size())
//		//	return false;
//			
//		//return true;
//		
//		return (size == seen.size() && size <= LIMIT);
//	}

	

	/**
	 * retorna true si es aciclico el subarbol y de paso
	 *    - verifica que parent este bien formado
	 *    - chequea que degree sea positivo
	 *    - que key sea non_null (si key es Object)
	 *    - que degree sea la cantidad de hijos (no descendientes) del nodo
	 */
     public static boolean isAcyclic(final BH start, final LinkedList<BH> seen) {

    	 if (start != SYMBOLICOBJ && seen.contains(start))
    		 return false;
    	 
    	 if (start.degree() != SYMBOLICINT && start.degree()<0)
    		 return false;
    	 
    	 // enable these lines if key is instance of Object
    	 //if (start.key==null)
    	 //	 return false;
    	 
    	 seen.add(start);
    	 
    	 BH child = start.child();
    	 
    	 int child_count = 0;
    	 
    	 while (child!=null && child!=SYMBOLICOBJ) {
    		 
    		 child_count++;
    		 
        	 if (child.parent() != SYMBOLICOBJ && child.parent() != start)
        		 return false;
    		 
    		 if (!isAcyclic(child, seen))
    			 return false;
    		 
    		 if (child.sibling() != SYMBOLICOBJ && child.sibling()!=null) {
    			 if (child.degree() != SYMBOLICINT && child.sibling().degree() != SYMBOLICINT && child.degree()<=child.sibling().degree())
    				 return false;
    		 }
    		 child = child.sibling();
    	 }
    	
    	 if (start.degree() != SYMBOLICINT && child_count != SYMBOLICINT && start.degree()!=child_count)
    		 return false;
    	 
    	 if (start.child()!=SYMBOLICOBJ && start.child()!=null) {
    		 int tam_child=1;
    		 if (start.child().child()!=null && start.child().child() != SYMBOLICOBJ) {
    			 BH curr = start.child().child();
    			 while (curr!=null && curr != SYMBOLICOBJ) {
    			   tam_child+=count_nodes(start.child().child());
    			   curr = curr.sibling();
    			 }
    		 }
    		 
    		 int tam_sibling=1;
    		 if (start.child().sibling()!=null && start.child().sibling()!=SYMBOLICOBJ) {
    			 BH curr = start.child().sibling();
    			 while (curr!=null && curr!=SYMBOLICOBJ) {
    			   tam_sibling+=count_nodes(start.child().sibling());
  			       curr = curr.sibling();
    			 }
    		 }
    		 
    		 if (tam_child!=SYMBOLICINT && tam_sibling!=SYMBOLICINT && tam_child!=tam_sibling)
    			 return false;
    		 
    	 }
    	 
    	 return true;
	}
	
	private static int count_nodes(BH start) {
		
		int node_count = 1;
		
		BH child = start.child();
		while (child != SYMBOLICOBJ && child!=null) {
			
			node_count += count_nodes(child);
			
			child=child.sibling();
		}
		
		return node_count;
	}

	private static boolean ordered(final BH node) {
		if (node.child() != null && node.child() != SYMBOLICOBJ) {
		  if (node.key() != SYMBOLICINT && node.child().key()!=SYMBOLICINT && node.child().key() < node.key()) {
			return false;
		  }
		  if (node.child()!=SYMBOLICOBJ && !ordered(node.child())) {
			return false;
		  }
		  for (BH ns = node.child().sibling(); ns != null && ns != SYMBOLICOBJ; ns = ns.sibling()) {
			if (ns.key()!=SYMBOLICINT && node.key() != SYMBOLICINT && ns.key() < node.key()) {
			  return false;
			}
			if (!ordered(ns)) {
			  return false;
			}
		  }
		  return true;
		} 
		 
		return true;
	}
	
	
	
	//modified version of extract min. returns the new root to 
	//the heap obtained after removing the min node.
	public BH extractMin(BH root) {

		
		if (root == null) 
			return null;
		
		

		
//		int old_size = size;

		BH temp = root, prevTemp = null;
		BH minNode = findMinNode_extractMin(root);
		while (temp.key != minNode.key) {
			prevTemp = temp;
			temp = temp.sibling();
		}

		

		if (prevTemp == null) {
			root = temp.sibling();
		} else {
			prevTemp.right = temp.sibling();
		}
		
		
		temp = temp.child();
		BH fakeNode = temp;
		while (temp != null) {
			temp.parent = null;
			temp = temp.right;
		}



		
		if ((root == null) && (fakeNode == null)) {
			size = 0;
		} else {
			if ((root == null) && (fakeNode != null)) {
				root = fakeNode.reverse(null);
				size--;
			} else {
				if ((root != null) && (fakeNode == null)) {
					size--;
				} else {
					root = root.unionNodes_extractMin(fakeNode.reverse(null), root);
					size--;
				}
			}
		}
		

		//System.out.println(size);
		//if (this.size==12) {
		//	throw new RuntimeException("Bingo!");
		//}
		return root;
	}

	
	
	public BH reverse(BH sibl) {
		BH ret;
		if (sibling() != null)
			ret = sibling().reverse(this);
		else
			ret = this;
		right = sibl;
		return ret;
	}

	
	
	private BH unionNodes_extractMin(BH binHeap, BH root) {
		root = root.merge_extractMin(binHeap, root);

		BH prevTemp = null, temp = root , nextTemp = root.sibling();
		
		while (nextTemp != null) {
			if ((temp.degree() != nextTemp.degree())
					|| ((nextTemp.sibling() != null) && (nextTemp.sibling().degree() == temp.degree()))) {
				prevTemp = temp;
				temp = nextTemp;
			} else {
				if (temp.key <= nextTemp.key) {
					temp.right = nextTemp.sibling();
					nextTemp.parent = temp;
					nextTemp.right = temp.child();
					temp.left = nextTemp;
					temp.degree++;
				} else {
					if (prevTemp == null) {
						root = nextTemp;
					} else {
						prevTemp.right = nextTemp;
					}
					temp.parent = nextTemp;
					temp.right = nextTemp.child();
					nextTemp.left = temp;
					nextTemp.degree++;
					temp = nextTemp;
				}
			}

			nextTemp = temp.sibling();
		}
		
		return root;
	}
	
	
	
	private BH merge_extractMin(BH binHeap, BH root) {

		BH temp1 = root, temp2 = binHeap;
		while ((temp1 != null) && (temp2 != null)) {
			if (temp1.degree == temp2.degree) {
				BH tmp = temp2;
				temp2 = temp2.sibling();
				tmp.right = temp1.sibling();
				temp1.right = tmp;
				temp1 = tmp.sibling();
			} else {
				if (temp1.degree < temp2.degree) {
					if ((temp1.sibling() == null)
							|| (temp1.sibling().degree > temp2.degree)) {
						BH tmp = temp2;
						temp2 = temp2.sibling();
						tmp.right = temp1.sibling();
						temp1.right = tmp;
						temp1 = tmp.sibling();
					} else {
						temp1 = temp1.sibling();
					}
				} else {
					BH tmp = temp1;
					temp1 = temp2;
					temp2 = temp2.sibling();
					temp1.right = tmp;
					if (tmp == root) {
						root = temp1;
					} 
				}
			}
		}

		if (temp1 == null) {
			temp1 = root;
			while (temp1.sibling() != null) {
				temp1 = temp1.sibling();
			}
			temp1.right = temp2;
		} 
		
		return root;

	}

	
	private static BH findMinNode_extractMin(BH arg) {
		BH x = arg, y = arg;
		int min = x.key;

		while (x != null) {
			
			if (x.key < min) {
				y = x;
				min = x.key;
			}
			x = x.sibling();
		}

		return y;
	}
	
	public void dumpStructure(BH root) {
	}

	public void countStructure(BH root) {
	}

	public boolean repOK(BH root, int size) {
		return true;
	}

	private static final int LIMIT = __SIZE__;

	public static void main(String[] args) {
		BH X = new BH(0, 0);
		//X = (BH) Debug.makeSymbolicRefBounded("X", X);
		X = (BH) Debug.makeSymbolicRef("X", X);
		if (X != null && X.repOK_Concrete(X)) {
			X.extractMin(X);
			X.countStructure(X);
		}
	}
	
}


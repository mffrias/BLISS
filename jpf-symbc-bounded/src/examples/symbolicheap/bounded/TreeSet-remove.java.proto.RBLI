package symbolicheap.bounded;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import gov.nasa.jpf.symbc.Debug;

public class TreeSet {
	
	
	//-------------------------------- LI infrastructure begin - do not remove----------------------------//
	
	public void dumpStructure(TreeSet root) {
	}

	public void countStructure(TreeSet root) {
	}

	public boolean repOK(TreeSet root, int size) {
		return true;
	}

	public TreeSet(){}

	public static final TreeSet SYMBOLICTREESET = new TreeSet(); //field added to execute the hybridRepOK.
	public static final int SYMBOLICINT = (int) Integer.MIN_VALUE; //field added to execute the hybridRepOK.

	public boolean hybridRepOK(){
		Set<TreeSet> visited = new HashSet<TreeSet>();
		List<TreeSet> worklist = new ArrayList<TreeSet>();
		
		
		if (this != SYMBOLICTREESET){
			visited.add(this);

			worklist.add(this);
			
			if (this.parent !=  SYMBOLICTREESET && this.parent != null)
				return false;

			while (!worklist.isEmpty()) {
				TreeSet node = worklist.remove(0);
				
				TreeSet left = node.left;
				if (left != null && left != SYMBOLICTREESET) {
					if (!visited.add(left)) {
						return false;
					}
					
					if (left.parent != SYMBOLICTREESET && left.parent != node) {
						return false;
					}
					worklist.add(left);

				}
				
				TreeSet right = node.right;
				if (right != null && right != SYMBOLICTREESET) {
					if (!visited.add(right)) {
						return false;
					}
					
					if (right.parent != SYMBOLICTREESET && right.parent != node) {
						return false;
					}
					worklist.add(right);
				}

			}
			return visited.size() <= LIMIT && this.hybridRepOK_colors(this);	
		} else {
			return true;
		}
	}

	
	
	public boolean hybridRepOK_colors(TreeSet root){
		if (root != SYMBOLICTREESET && root.color != SYMBOLICINT){
			if (root.color() != BLACK)
				return false;
			List<TreeSet> worklist = new ArrayList<TreeSet>();
			worklist.add(root);
			while (!worklist.isEmpty()) {
				TreeSet current = worklist.remove(0);
				TreeSet cl = current.left();
				TreeSet cr = current.right();
				if (current.color() == RED) {
					if (cl != null && cl.color() == RED) {
						return false;
					}
					if (cr != null && cr.color() == RED) {
						return false;
					}
				}
				if (cl != null && cl != SYMBOLICTREESET) {
					worklist.add(cl);
				}
				if (cr != null && cr != SYMBOLICTREESET) {
					worklist.add(cr);
				}
			}
			int numberOfBlack = -1;
			List<Pair<TreeSet, Integer>> worklist2 = new ArrayList<TreeSet.Pair<TreeSet, Integer>>();
			
			worklist2.add(new Pair<TreeSet, Integer>(root, 0)); //assumes root is not symbolic, which was checked above
			//		root.dumpStructure(root);
			while (!worklist2.isEmpty()) {
				//			System.out.println("->0");
				Pair<TreeSet, Integer> p = worklist2.remove(0);
				TreeSet e = p.first();
				int n = p.second();
				if (e != null && e.color() == BLACK) {
					n++;
					//				System.out.println("->1 n=" + n);
				}
				if (e == null) {
					//				System.out.println("->2");
					if (numberOfBlack == -1) {
						numberOfBlack = n;
						//					System.out.println("->3 n=" + n);
					} else if (numberOfBlack != n) {
						//					System.out.println("REPOK FAIL n = " + n + " noBlk = " + numberOfBlack);
						return false;
					}
				} else {
					//				System.out.println("->4");
					if (e.left != SYMBOLICTREESET)
						worklist2.add(new Pair<TreeSet, Integer>(e.left(), n));
					if (e.right != SYMBOLICTREESET)
						worklist2.add(new Pair<TreeSet, Integer>(e.right(), n));
				}
			}
			return true;
		} else
			return true;
	}

	
	
	
	private class Pair<T, U> {
		private T a;
		private U b;

		public Pair(T a, U b) {
			this.a = a;
			this.b = b;
		}

		public T first() {
			return a;
		}

		public U second() {
			return b;
		}
	}

	
	//-------------------------------- LI infrastructure end - do not remove----------------------------//

	
	
	public static final int RED = 0;

	public static final int BLACK = 1;

	public int key;

	public int color;

	public TreeSet left;

	public TreeSet right;

	public TreeSet parent;

	public TreeSet(int key, int color) {
		this.key = key;
		this.color = color;
		//		this.color = Verify.random(1);
		//		System.out.println("I AM HERE " + this.color);
		left = right = parent = null;
	}

	public TreeSet left() {
		return left;
	}

	public TreeSet right() {
		return right;
	}

	public int color() {
		if (color == RED) {
			color = RED;
		} else {
			color = BLACK;
		}
		return color;
	}


//----------------------------- contains-begin-----------------------------------//	
	
	public boolean contains(TreeSet root, int key) {
		TreeSet p = root;
		while (p != null) {
//			p.dumpStructure(p);
//			Verify.ignoreIf(!repOK(root, LIMIT));
			if (key == p.key) {
				return true;
			} else if (key < p.key) {
				p = p.left;
			} else {
				p = p.right;
			}
		}
		return false;
	}

	
//----------------------------- contains-end-----------------------------------//	

	
	
	
//------------------------------add-roops-begin-------------------------------------//
	
	public TreeSet add(int aKey, TreeSet root) {
		TreeSet t = root;

		if (t == null) {
			init_TreeSet(root, aKey, null);

			return root;
		}

		boolean boolean_true= true;
		while (boolean_true) {

			if (aKey == t.key) {

				return root;
			} else if (aKey < t.key) {

				if (t.left != null) {

					t = t.left;
				} else {

					t.left = new TreeSet();
					init_TreeSet(t.left, aKey, t);

					root = fixAfterInsertion(t.left, root);

					return root;
				}
			} else { // cmp > 0


				if (t.right != null) {

					t = t.right;
				} else {

					t.right = new TreeSet();
					init_TreeSet(t.right, aKey, t);
					root = fixAfterInsertion(t.right, root);

					return root;
				}
			}
		}
		
		return root;
	}

	
    private void init_TreeSet(TreeSet entry, int new_key, TreeSet new_parent) {
        entry.color = RED;
        entry.left = null;
        entry.right = null;
        entry.key = new_key;
        entry.parent = new_parent;
}


	/**
	 * Balancing operations.
	 *
	 * Implementations of rebalancings during insertion and deletion are
	 * slightly different than the CLR version.  Rather than using dummy
	 * nilnodes, we use a set of accessors that deal properly with null.  They
	 * are used to avoid messiness surrounding nullness checks in the main
	 * algorithms.
	 */


	
    private static int colorOf(TreeSet p) {
    	int result ;
    	if (p==null)
    		result = BLACK;
    	else
    		result = p.color;
        return result;
    }

    
	private static TreeSet parentOf(TreeSet p) {
		TreeSet result;
		if (p == null)
			result = null;
		else
			result = p.parent;

		return result;
	}

	private static void setColor(TreeSet p, int c) {
		if (p != null)
			p.color = c;
	}

	private static TreeSet leftOf(TreeSet p) {
		TreeSet result ;
		if (p == null)
			result = null;
		else
			result = p.left;
		return result;
	}

	private static TreeSet rightOf(TreeSet p) {
		TreeSet result;
		if (p == null) 
			result = null;
		else
			result = p.right;
		return result;
	}

	/** From CLR **/
	
	//invariant: must be called as root.rotate(node,root)
	private TreeSet rotateLeft(TreeSet p, TreeSet root) {
		TreeSet r = p.right;
		p.right = r.left;
		if (r.left != null)
			r.left.parent = p;
		r.parent = p.parent;
		if (p.parent == null)
			root = r;
		else if (p.parent.left == p)
			p.parent.left = r;
		else
			p.parent.right = r;
		r.left = p;
		p.parent = r;
		return root;
	}

	/** From CLR **/
	//invariant: must be called as root.rotate(node,root)
	private TreeSet rotateRight(TreeSet p, TreeSet root) {
		TreeSet l = p.left;
		p.left = l.right;
		if (l.right != null)
			l.right.parent = p;
		l.parent = p.parent;
		if (p.parent == null)
			root = l;
		else if (p.parent.right == p)
			p.parent.right = l;
		else
			p.parent.left = l;
		l.right = p;
		p.parent = l;
		return root;
	}

	//invariant: must be called as root.fix(node,root)
	private TreeSet fixAfterInsertion(final TreeSet entry, TreeSet root) {
		TreeSet x = entry;
		x.color = RED;

		while (x != null && x != root && x.parent.color == RED) {


			if (parentOf(x) == leftOf(parentOf(parentOf(x)))) {

				TreeSet y = rightOf(parentOf(parentOf(x)));
				if (colorOf(y) == RED) {

					setColor(parentOf(x), BLACK);
					setColor(y, BLACK);
					setColor(parentOf(parentOf(x)), RED);
					x = parentOf(parentOf(x));
				} else {

					if (x == rightOf(parentOf(x))) {

						x = parentOf(x);
						root = rotateLeft(x, root);
					} else {
					}
					setColor(parentOf(x), BLACK);
					setColor(parentOf(parentOf(x)), RED);
					if (parentOf(parentOf(x)) != null) {
						root = rotateRight(parentOf(parentOf(x)), root);
					} else {
					}
				}
			} else {

				TreeSet y = leftOf(parentOf(parentOf(x)));
				if (colorOf(y) == RED) {

					setColor(parentOf(x), BLACK);
					setColor(y, BLACK);
					setColor(parentOf(parentOf(x)), RED);
					x = parentOf(parentOf(x));
				} else {

					if (x == leftOf(parentOf(x))) {

						x = parentOf(x);
						rotateRight(x, root);
					} else {
					}
					setColor(parentOf(x), BLACK);
					setColor(parentOf(parentOf(x)), RED);
					if (parentOf(parentOf(x)) != null) {
						rotateLeft(parentOf(parentOf(x)), root);
					} else {
					}

				}
			}
		}
		root.color = BLACK;
		return root;
	}


//----------------------------------------add-roops-end-----------------------------------------//
	
	
	
	

	
	
	
	
	
//--------------------------------------remove-begin-------------------------------------//
	
	public TreeSet remove(final int myKey) {
		TreeSet p = this.getEntry(myKey);
		TreeSet root = this;

		if (p != null)
			root = this.deleteEntry(p, root);
		return root;
	}

	
	
	
	private TreeSet deleteEntry(TreeSet arg, TreeSet root) {

		TreeSet p = arg;

		// If strictly internal, copy successor's element to p and then make p
		// point to successor.
		if (p.left != null && p.right != null) {
			TreeSet s;
			s = this.successor(p);
			p.key = s.key;
			p = s;
		} // p has 2 children

		// Start fixup at replacement node, if it exists.
		TreeSet replacement;
		if (p.left != null)
			replacement = p.left;
		else
			replacement = p.right;

		if (replacement != null) {
			// Link replacement to parent
			replacement.parent = p.parent;
			if (p.parent == null)
				root = replacement;
			else if (p == p.parent.left)
				p.parent.left = replacement;
			else
				p.parent.right = replacement;

			// Null out links so they are OK to use by fixAfterDeletion.
			p.left = null;
			p.right = null;
			p.parent = null;

			// Fix replacement
			if (p.color == this.BLACK)
				root = root.fixAfterDeletion(replacement, root);
		} else if (p.parent == null) { // return if we are the only node.
			root = null;
		} else { // No children. Use self as phantom replacement and unlink.

			if (p.color == this.BLACK) {
				root = root.fixAfterDeletion(p, root);
			}

			if (p.parent != null) {
				if (p == p.parent.left)
					p.parent.left = null;
				else if (p == p.parent.right)
					p.parent.right = null;
				p.parent = null;
			}
		}
		
		return root;

	}
	
	
	private TreeSet fixAfterDeletion(TreeSet arg, TreeSet root) {
		TreeSet x = arg;

		while (x != root && x.color == BLACK) {

			TreeSet parentOf_x = parentOf(x);
			TreeSet leftOf_parentOf_x = leftOf(parentOf_x);
			int colorOf_parentOf_x = colorOf(parentOf_x);

			if (x == leftOf_parentOf_x) {
				TreeSet sib = rightOf(parentOf_x);

				int colorOf_sib = colorOf(sib);
				if (colorOf_sib == RED) {

					setColor(sib, BLACK); // <--- CHANGE
					setColor(parentOf_x, RED); // <--- CHANGE
					root = rotateLeft(parentOf_x, root); // <--- CHANGE

					parentOf_x = parentOf(x);
					sib = rightOf(parentOf_x);
				}

				TreeSet leftOf_sib = leftOf(sib);
				int colorOf_leftOf_sib = colorOf(leftOf_sib);
				TreeSet rightOf_sib = rightOf(sib);
				int colorOf_rightOf_sib = colorOf(rightOf_sib);

				if (colorOf_leftOf_sib == BLACK
						&& colorOf_rightOf_sib == BLACK) {

					setColor(sib, RED); // <--- UPDATE

					x = parentOf_x;
				} else {
					if (colorOf_rightOf_sib == BLACK) {
						setColor(leftOf_sib, BLACK); // <--- UPDATE
						setColor(sib, RED); // <--- UPDATE
						root = rotateRight(sib, root); // <--- UPDATE

						parentOf_x = parentOf(x);
						sib = rightOf(parentOf_x);
					}

					parentOf_x = parentOf(x);
					colorOf_parentOf_x = colorOf(parentOf_x);
					rightOf_sib = rightOf(sib);

					setColor(sib, colorOf_parentOf_x); // <--- UPDATE (COLOR)
					setColor(parentOf_x, BLACK); // <--- UPDATE (COLOR)
					setColor(rightOf_sib, BLACK); // <--- UPDATE (COLOR)
					root = rotateLeft(parentOf_x, root); // <--- UPDATE (PARENT;LEFT;RIGHT)
					x = root;
				}
			} else { // symmetric
				TreeSet sib = leftOf_parentOf_x;

				int colorOf_sib = colorOf(sib);
				if (colorOf_sib == RED) {
					setColor(sib, BLACK); // <--- UPDATE (color)
					setColor(parentOf_x, RED); // <--- UPDATE (color)
					root = rotateRight(parentOf_x, root); // <--- UPDATE (left,right,parent)

					parentOf_x = parentOf(x);
					sib = leftOf(parentOf_x);
				}

				TreeSet rightOf_sib = rightOf(sib);

				int colorOf_rightOf_sib = colorOf(rightOf_sib);

				TreeSet leftOf_sib = leftOf(sib);

				int colorOf_leftOf_sib = colorOf(leftOf_sib);

				if (colorOf_rightOf_sib == BLACK
						&& colorOf_leftOf_sib == BLACK) {
					setColor(sib, RED); // <--- UPDATE (color)
					x = parentOf_x;
				} else {
					if (colorOf_leftOf_sib == BLACK) {
						setColor(rightOf_sib, BLACK); // <---UPDATE (color)
						setColor(sib, RED); //<---UPDATE (color)
						root = rotateLeft(sib, root); // <---- UPDATE (parent,left,right)

						parentOf_x = parentOf(x);
						sib = leftOf(parentOf_x);
					}
					parentOf_x = parentOf(x);
					colorOf_parentOf_x = colorOf(parentOf_x);
					leftOf_sib = leftOf(sib);

					setColor(sib, colorOf_parentOf_x); // <--- UPDATE (color)
					setColor(parentOf_x, BLACK); // <--- UPDATE (color)
					setColor(leftOf_sib, BLACK); // <--- UPDATE (color)
					root = rotateRight(parentOf_x, root); // <--- UPDATE (parent,left,right)
					x = root;
				}
			}
		}

		setColor(x, BLACK); // <--- UPDATE (color)
		
		return root;
	}
	
	
	
	
	
	private TreeSet getEntry(int myKey) {
		TreeSet found = null;

		TreeSet p;
		p = this;
		while (p != null && found == null) {
			if (myKey < p.key) {
				p = p.left;
			} else {
				if (myKey > p.key) {
					p = p.right;
				} else
					found = p;
			}
		}
		return found;
	}

    

    
    
    private TreeSet successor(TreeSet t) {
    	if (t == null) {
    		return null;
    		
    	} else if (t.right != null) {
    		TreeSet p = t.right;
    		while (p.left != null) {
    			p = p.left;
    		}

    		return p;
    	} else {
    		TreeSet p = t.parent;
    		TreeSet ch = t;
    		while (p != null && ch == p.right) {
    			ch = p;
    			p = p.parent;
    		}
    		return p;
    	}
    }


    



    
    
    




    
   
    
//--------------------------------------remove-end-------------------------------------//
    
    
    
//--------------------------------------bfsTraverse-begin-------------------------------------//
    
    
	public void bfsTraverse(TreeSet root){
		Set<TreeSet> visited = new HashSet<TreeSet>();
		List<TreeSet> worklist = new ArrayList<TreeSet>();
		visited.add(root);
		worklist.add(root);
		while (!worklist.isEmpty() && visited.size() <= LIMIT) {
			TreeSet node = worklist.remove(0);
			TreeSet left = node.left;
			if (left != null && visited.add(left)) {
				
				worklist.add(left);
			}
			TreeSet right = node.right;
			if (right != null && visited.add(right)) {
				worklist.add(right);
			}
		} 
	}

	
//--------------------------------------bfsTraverse-end-------------------------------------//
	
	
//--------------------------------------dfsTraverse-begin-------------------------------------//
	
	
	public void dfsTraverse(TreeSet root){
		HashSet<TreeSet> visited = new HashSet<TreeSet>();
		dfsTraverseAux(root, visited);
	}
	
	
	private void dfsTraverseAux(TreeSet root, HashSet<TreeSet> visited){
		if (root != null && visited.add(root)){
			
			if (root.left != null){
				dfsTraverseAux(root.left, visited);
			}
			if (root.right != null){
				dfsTraverseAux(root.right, visited);
			}
			
		}
	}
	
//--------------------------------------dfsTraverse-end-------------------------------------//

    
    
    
//------------------------- repOK_Concrete begin -----------------------------------//
	

	public boolean repOK_Concrete(TreeSet root) {
		return repOK_Structure(root) && repOK_Colors(root) && repOK_KeysAndValues(root);
	}

	public boolean repOK_Structure(TreeSet root) {
		Set<TreeSet> visited = new HashSet<TreeSet>();
		List<TreeSet> worklist = new ArrayList<TreeSet>();
		visited.add(root);
		worklist.add(root);
		
		if (root.parent != null)
			return false;

		while (!worklist.isEmpty()) {
			TreeSet node = worklist.remove(0);
			TreeSet left = node.left();
			if (left != null) {
				if (!visited.add(left)) {
					return false;
				}
				if (left.parent != node) {
					return false;
				}
				worklist.add(left);
			}
			TreeSet right = node.right();
			if (right != null) {
				if (!visited.add(right)) {
					return false;
				}
				if (right.parent != node) {
					return false;
				}
				worklist.add(right);
			}
		}
		return visited.size() <= LIMIT;
	}

	public boolean repOK_Colors(TreeSet root) {
		if (root.color() != BLACK)
			return false;
		List<TreeSet> worklist = new ArrayList<TreeSet>();
		worklist.add(root);
		while (!worklist.isEmpty()) {
			TreeSet current = worklist.remove(0);
			TreeSet cl = current.left();
			TreeSet cr = current.right();
			if (current.color() == RED) {
				if (cl != null && cl.color() == RED) {
					return false;
				}
				if (cr != null && cr.color() == RED) {
					return false;
				}
			}
			if (cl != null) {
				worklist.add(cl);
			}
			if (cr != null) {
				worklist.add(cr);
			}
		}
		int numberOfBlack = -1;
		List<Pair<TreeSet, Integer>> worklist2 = new ArrayList<TreeSet.Pair<TreeSet, Integer>>();
		worklist2.add(new Pair<TreeSet, Integer>(root, 0));
		//		root.dumpStructure(root);
		while (!worklist2.isEmpty()) {
			//			System.out.println("->0");
			Pair<TreeSet, Integer> p = worklist2.remove(0);
			TreeSet e = p.first();
			int n = p.second();
			if (e != null && e.color() == BLACK) {
				n++;
			}
			if (e == null) {
				if (numberOfBlack == -1) {
					numberOfBlack = n;
				} else if (numberOfBlack != n) {
					return false;
				}
			} else {
				worklist2.add(new Pair<TreeSet, Integer>(e.left(), n));
				worklist2.add(new Pair<TreeSet, Integer>(e.right(), n));
			}
		}
		return true;
	}

	public boolean repOK_KeysAndValues(TreeSet root) {
		int min = repOK_findMin(root);
		int max = repOK_findMax(root);
		if (!repOK_orderedKeys(root, min - 1, max + 1)) {
			return false;
		}
		List<TreeSet> worklist = new ArrayList<TreeSet>();
		worklist.add(root);
		while (!worklist.isEmpty()) {
			TreeSet current = worklist.remove(0);
			if (current.left() != null) {
				worklist.add(current.left());
			}
			if (current.right() != null) {
				worklist.add(current.right());
			}
		}
		return true;
	}

	private int repOK_findMin(TreeSet root) {
		TreeSet curr = root;
		while (curr.left() != null) {
			curr = curr.left();
		}
		return curr.key;
	}

	private int repOK_findMax(TreeSet root) {
		TreeSet curr = root;
		while (curr.right() != null) {
			curr = curr.right();
		}
		return curr.key;
	}

	public boolean repOK_orderedKeys(TreeSet e, int min, int max) {
		if ((e.key <= min) || (e.key >= max)) {
			return false;
		}
		if (e.left() != null) {
			if (!repOK_orderedKeys(e.left(), min, e.key)) {
				return false;
			}
		}
		if (e.right() != null) {
			if (!repOK_orderedKeys(e.right(), e.key, max)) {
				return false;
			}
		}
		return true;
	}
	
	
	//------------------------- repOK_Concrete end -----------------------------------//

	
	
	//------------------------- repOK_Concrete-Post begin -----------------------------------//
	

	public boolean repOK_ConcretePost(TreeSet root) {
		return repOK_StructurePost(root) && repOK_ColorsPost(root) /*&& repOK_KeysAndValuesPost(root)*/;
	}

	public boolean repOK_StructurePost(TreeSet root) {
		Set<TreeSet> visited = new HashSet<TreeSet>();
		List<TreeSet> worklist = new ArrayList<TreeSet>();
		visited.add(root);
		worklist.add(root);
		
		if (root.parent != null)
			return false;

		
		while (!worklist.isEmpty()) {
			TreeSet node = worklist.remove(0);
			TreeSet left = node.left();
			if (left != null) {
				if (!visited.add(left)) {
					
					return false;
					
				}
				if (left.parent != node) {
					
					return false;
				}
				worklist.add(left);
			}
			TreeSet right = node.right();
			if (right != null) {
				if (!visited.add(right)) {
					
					return false;
				}
				if (right.parent != node) {
					
					return false;
				}
				worklist.add(right);
			}
		}
		return true;
	}

	public boolean repOK_ColorsPost(TreeSet root) {
		if (root.color() != BLACK)
			return false;
		List<TreeSet> worklist = new ArrayList<TreeSet>();
		worklist.add(root);
		while (!worklist.isEmpty()) {
			TreeSet current = worklist.remove(0);
			TreeSet cl = current.left();
			TreeSet cr = current.right();
			if (current.color() == RED) {
				if (cl != null && cl.color() == RED) {
					return false;
				}
				if (cr != null && cr.color() == RED) {
					return false;
				}
			}
			if (cl != null) {
				worklist.add(cl);
			}
			if (cr != null) {
				worklist.add(cr);
			}
		}
		int numberOfBlack = -1;
		List<Pair<TreeSet, Integer>> worklist2 = new ArrayList<TreeSet.Pair<TreeSet, Integer>>();
		worklist2.add(new Pair<TreeSet, Integer>(root, 0));
		while (!worklist2.isEmpty()) {
			Pair<TreeSet, Integer> p = worklist2.remove(0);
			TreeSet e = p.first();
			int n = p.second();
			if (e != null && e.color() == BLACK) {
				n++;
			}
			if (e == null) {
				if (numberOfBlack == -1) {
					numberOfBlack = n;
				} else if (numberOfBlack != n) {
					return false;
				}
			} else {
				worklist2.add(new Pair<TreeSet, Integer>(e.left(), n));
				worklist2.add(new Pair<TreeSet, Integer>(e.right(), n));
			}
		}
		return true;
	}

	public boolean repOK_KeysAndValuesPost(TreeSet root) {
		int min = repOK_findMin(root);
		int max = repOK_findMax(root);
		if (!repOK_orderedKeys(root, min - 1, max + 1)) {
			return false;
		}
		List<TreeSet> worklist = new ArrayList<TreeSet>();
		worklist.add(root);
		while (!worklist.isEmpty()) {
			TreeSet current = worklist.remove(0);
			if (current.left() != null) {
				worklist.add(current.left());
			}
			if (current.right() != null) {
				worklist.add(current.right());
			}
		}
		return true;
	}

	
	//------------------------- repOK_Concrete-Post end -----------------------------------//

	
	//----------------------- remove -----------------------------//
	

  private static int LIMIT = __SIZE__;

  public static void main(String[] args) {

	  TreeSet N0 = new TreeSet(0, BLACK);
	  // N0 = (TreeSet) Debug.makeSymbolicRef("N0", N0);
	  N0 = (TreeSet) Debug.makeSymbolicRefBounded("N0", N0);

	  try {
		  N0 = N0.remove(1000);
		  if (N0 != null)
			  N0.countStructure(N0);
	  } catch (RuntimeException e){
		  //ignore
	  }
  }
	
}

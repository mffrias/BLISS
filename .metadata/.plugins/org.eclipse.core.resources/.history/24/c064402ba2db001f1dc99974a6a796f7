package symbolicheap.bounded;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import gov.nasa.jpf.symbc.Debug;
import gov.nasa.jpf.symbc.DebugBounded;

public class BinomialHeap {

	public/*@ nullable @*/BinomialHeapNode Nodes;

	public int size;

	public BinomialHeap() {
		Nodes = null;
		size = 0;
	}


//	public static final BinomialHeap SYMBOLICBINOMIALHEAP = new BinomialHeap(); //field added to execute the hybridRepOK.
//	public static final int SYMBOLICINT = (int) Integer.MIN_VALUE; //field added to execute the hybridRepOK.



	public boolean repOK_Concrete() {
		BinomialHeapNode root = this.Nodes;
		final LinkedList<BinomialHeapNode> seen = new LinkedList<BinomialHeapNode>();
		if (root!=null) {

			// son aciclicos los hijos de root?
			if (!isAcyclic(root, seen)){
				return false;
			}	
			// esta ordenado el arbol que cuelga de root?
			if (!ordered(root)){
				return false;
			}

			// el parent de root es null?
			if (root.parent!=null){
				return false;
			}
			// si hay un root.sibling, el degree de root es menor
			if (root.sibling!=null) {
				if (root.degree >= root.sibling.degree){
					return false;
				}	
			}

			// los ns son los siblings de root
			BinomialHeapNode ns = root.sibling;

			while (ns != null) {

				// son aciclicos los hijos del sibling de root
				if (!isAcyclic(ns, seen)){
					return false;
				}
				// el parent del sibling es root?
				if (ns.parent!=null){
					return false;
				}
				// el degree de este sibling es menor al del siguiente?
				if (ns.sibling!=null) {
					if (ns.degree>=ns.sibling.degree){
						return false;
					}	
				}

				// estan ordenados el subarbol que cuelga de este sibling?
				if (!ordered(ns)){
					return false;
				}

				// proximo sibling de root
				ns = ns.sibling;
			}

		}

		return size == seen.size();

	}



	public boolean repOK_ConcretePost() {

		BinomialHeapNode root = this.Nodes;
		final LinkedList<BinomialHeapNode> seen = new LinkedList<BinomialHeapNode>();

		if (root!=null) {

			// son aciclicos los hijos de root?
			if (!isAcyclic(root, seen)){
				return false;
			}

			// esta ordenado el arbol que cuelga de root?
			if (!ordered(root)){
				return false;
			}

			// el parent de root es null?
			if (root.parent!=null){
				return false;
			}	

			// si hay un root.sibling, el degree de root es menor
			if (root.sibling!=null) {
				if (root.degree >= root.sibling.degree){
					return false;
				}
			}

			// los ns son los siblings de root
			BinomialHeapNode ns = root.sibling;

			while (ns != null) {

				// son aciclicos los hijos del sibling de root
				if (!isAcyclic(ns, seen)){
					return false;
				}

				// el parent del sibling de root es null?
				if (ns.parent!=null){
					return false;
				}

				// el degree de este sibling es menor al del siguiente?
				if (ns.sibling!=null) {
					if (ns.degree>=ns.sibling.degree){
						return false;
					}
				}

				// estan ordenados el subarbol que cuelga de este sibling?
				if (!ordered(ns)){
					return false;
				}

				// proximo sibling de root
				ns = ns.sibling;
			}

		}

		return size == seen.size();
	}


//	public boolean hybridRepOK() {
//		BinomialHeapNode root = this.Nodes;
//
//		final LinkedList<BinomialHeapNode> seen = new LinkedList<BinomialHeapNode>();
//
//		if (root != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && root!=null) {
//
//			// son aciclicos los hijos de root?
//			if (!acyclic_hybrid(root, seen))
//				return false;
//
//			// esta ordenado el arbol que cuelga de root?
//			if (!ordered_hybrid(root))
//				return false;
//
//			// el parent de root es null?
//			if (root.parent != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && root.parent!=null)
//				return false;
//
//			// si hay un root.sibling, el degree de root es menor
//			if (root.sibling != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && root.sibling!=null) {
//				if (root.degree != SYMBOLICINT && root.sibling.degree != SYMBOLICINT && root.degree >= root.sibling.degree)
//					return false;
//			}
//
//			// los ns son los siblings de root
//			BinomialHeapNode ns = root.sibling;
//
//			while (ns != null && ns != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE) {
//
//				// son aciclicos los hijos del sibling de root
//				if (!acyclic_hybrid(ns, seen))
//					return false;
//
//				// es parent del sibling de root es null?
//				if (ns.parent!=BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && ns.parent!=null)
//					return false;
//
//				// el degree de este sibling es menor al del siguiente?
//				if (ns.sibling!=BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && ns.sibling!=null) {
//					if (ns.degree != SYMBOLICINT && ns.sibling.degree != SYMBOLICINT && ns.degree>=ns.sibling.degree)
//						return false;
//				}
//
//				// estan ordenados el subarbol que cuelga de este sibling?
//				if (!ordered_hybrid(ns))
//					return false;
//
//				// proximo sibling de root
//				ns = ns.sibling;
//			}
//		}
//		return true;
//	}




	/**
	 * retorna true si es aciclico el subarbol y de paso
	 *    - verifica que parent este bien formado
	 *    - chequea que degree sea positivo
	 *    - que key sea non_null (si key es Object)
	 *    - que degree sea la cantidad de hijos (no descendientes) del nodo
	 */
	public static boolean isAcyclic(final BinomialHeapNode start, final LinkedList<BinomialHeapNode> seen) {
		if (seen.contains(start)){
			return false;
		}
		if (start.degree<0){
			return false;
		}

		// enable these lines if key is instance of Object
		//if (start.key==null)
		//	 return false;

		seen.add(start);

		BinomialHeapNode currchild = start.child;

		int child_count = 0;

		while (currchild!=null) {
			child_count++;

			if (currchild.parent != start){
				return false;
			}
			if (!isAcyclic(currchild, seen)){
				return false;
			}
			if (currchild.sibling!=null) {
				if (currchild.degree<=currchild.sibling.degree){
					return false;
				}
			}
			currchild = currchild.sibling;
		}

		if (start.degree!=child_count){
			return false;
		}

		if (start.child!=null) {
			int tam_child=1;
			if (start.child.child!=null) {
				BinomialHeapNode curr = start.child.child;
				while (curr!=null) {
					tam_child+= count_nodes(curr);
					curr = curr.sibling;
				}
			}

			int tam_sibling=1;
			if (start.child.sibling!=null) {
				BinomialHeapNode curr = start.child.sibling;
				while (curr!=null) {
					tam_sibling+= count_nodes(curr);
					curr = curr.sibling;
				}
			}

			if (tam_child!=tam_sibling){
				return false;
			}
		}
		return true;	
	}










//	/**
//	 * retorna true si es aciclico el subarbol y de paso
//	 *    - verifica que parent este bien formado
//	 *    - chequea que degree sea positivo
//	 *    - que key sea non_null (si key es Object)
//	 *    - que degree sea la cantidad de hijos (no descendientes) del nodo
//	 */
//	public static boolean acyclic_hybrid(final BinomialHeapNode start, final LinkedList<BinomialHeapNode> seen) {
//		if (start != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE){
//
//			if (seen.contains(start))
//				return false;
//
//			if (start.degree != BinomialHeapNode.SYMBOLICINT && start.degree<0)
//				return false;
//
//			// enable these lines if key is instance of Object
//			//if (start.key==null)
//			//	 return false;
//
//			seen.add(start);
//
//			BinomialHeapNode child = start.child;
//
//			int child_count = 0;
//
//			while (child!=null && child!=BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE) {
//
//				child_count++;
//
//				if (child.parent != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && child.parent != start)
//					return false;
//
//				if (!acyclic_hybrid(child, seen))
//					return false;
//
//				if (child.sibling != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && child.sibling!=null) {
//					if (child.degree != SYMBOLICINT && child.sibling.degree != SYMBOLICINT && child.degree<=child.sibling.degree)
//						return false;
//				}
//				child = child.sibling;
//			}
//
//			if (child == BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE){
//				return true;
//			}
//
//
//			if (start.degree != BinomialHeapNode.SYMBOLICINT && start.degree!=child_count)
//				return false;
//
//			if (start.child != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && start.child!=null) {
//				int tam_child=1;
//				if (start.child.child!=BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && start.child.child!=null) {
//					BinomialHeapNode curr = start.child.child;
//					while (curr != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && curr!=null) {
//						int cnh = count_nodes_hybrid(curr);
//						if (cnh == BinomialHeapNode.SYMBOLICINT){
//							tam_child = BinomialHeapNode.SYMBOLICINT;
//							break;
//						} else {
//							tam_child+= cnh;
//						}
//						curr = curr.sibling;
//					}
//				} else {
//					if (start.child.child == BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE)
//						tam_child = BinomialHeapNode.SYMBOLICINT;
//				}
//
//				int tam_sibling=1;
//				if (start.child.sibling!=BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && start.child.sibling!=null) {
//					BinomialHeapNode curr = start.child.sibling;
//					while (curr!=null) {
//						int cnh = count_nodes_hybrid(curr);
//						if (cnh == BinomialHeapNode.SYMBOLICINT){
//							tam_sibling = BinomialHeapNode.SYMBOLICINT;
//							break;
//						} else {
//							tam_sibling+= cnh;
//						}
//						curr = curr.sibling;
//					}
//				} else {
//					if (start.child.sibling == BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE)
//						tam_sibling = BinomialHeapNode.SYMBOLICINT;
//				}
//
//				if (tam_child!=BinomialHeapNode.SYMBOLICINT && tam_sibling!=BinomialHeapNode.SYMBOLICINT && tam_child!=tam_sibling){
//					return false;
//				}
//
//			}
//
//		}
//		return true;
//	}



//	private static int count_nodes_hybrid(BinomialHeapNode start) {
//
//		int node_count = 1;
//		BinomialHeapNode child = start.child;
//		while (child != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && child != null) {
//			if (node_count != BinomialHeapNode.SYMBOLICINT){
//				int cnh = count_nodes_hybrid(child);
//				if (cnh != BinomialHeapNode.SYMBOLICINT){
//					node_count += count_nodes_hybrid(child);
//				} else {
//					return BinomialHeapNode.SYMBOLICINT;
//				}
//			} else {
//				return SYMBOLICINT;
//			}
//			child=child.sibling;
//		}
//		if (child != null)
//			return SYMBOLICINT;
//		else
//			return node_count;
//	}


	/**
	 * 
	 * @param start
	 * @return number of nodes reachable from start.child through fields child and sibling + 1;
	 */
	private static int count_nodes(BinomialHeapNode start) {

		int node_count = 1;
		BinomialHeapNode child = start.child;
		while (child!=null) {	
			node_count += count_nodes(child);
			child=child.sibling;
		}
		return node_count;
	}



//	private static boolean ordered_hybrid(final BinomialHeapNode node) {
//		if (node.child != null && node.child != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE) {
//			if (node.key != SYMBOLICINT && node.child.key!=SYMBOLICINT && node.child.key < node.key) {
//				return false;
//			}
//			if (node.child!=BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE && !ordered_hybrid(node.child)) {
//				return false;
//			}
//			for (BinomialHeapNode ns = node.child.sibling; ns != null && ns != BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE; ns = ns.sibling) {
//				if (ns.key!=SYMBOLICINT && node.key != SYMBOLICINT && ns.key < node.key) {
//					return false;
//				}
//				if (!ordered_hybrid(ns)) {
//					return false;
//				}
//			}
//			return true;
//		}
//		return true;
//	}



	private static boolean ordered(final BinomialHeapNode node) {
		if (node.child != null) {
			if (node.child.key < node.key) {
				return false;
			}
			if (!ordered(node.child)) {
				return false;
			}
			for (BinomialHeapNode ns = node.child.sibling; ns != null; ns = ns.sibling) {
				if (ns.key < node.key) {
					return false;
				}
				if (!ordered(ns)) {
					return false;
				}
			}
			return true;
		} 	 
		return true;
	}





	public void dfsTraverse(BinomialHeapNode root){
		HashSet<BinomialHeapNode> visited = new HashSet<BinomialHeapNode>();
		dfsTraverseAux(root, visited);
		//		visited.size() <= LIMIT;
	}


	private void dfsTraverseAux(BinomialHeapNode root, HashSet<BinomialHeapNode> visited){
		if (root != null && visited.add(root)){

			if (root.sibling != null){
				dfsTraverseAux(root.sibling, visited);
			}
			if (root.child != null){
				dfsTraverseAux(root.child, visited);
			}
			if (root.parent != null){
				dfsTraverseAux(root.parent, visited);
			}
		}
	}




	public void bfsTraverse(BinomialHeapNode nodes){
		Set<BinomialHeapNode> visited = new HashSet<BinomialHeapNode>();
		List<BinomialHeapNode> worklist = new ArrayList<BinomialHeapNode>();
		if (nodes != null){
			visited.add(nodes);
			worklist.add(nodes);
			while (!worklist.isEmpty() && visited.size() <= LIMIT) {
				BinomialHeapNode node = worklist.remove(0);
				assert(node.child != null);

				BinomialHeapNode sibling = node.sibling;
				if (sibling != null && visited.add(sibling)) {
					worklist.add(sibling);
				}
				BinomialHeapNode child = node.child;
				if (child != null && visited.add(child)) {
					worklist.add(child);
				}
				BinomialHeapNode parent = node.parent;
				if (parent != null && visited.add(parent)) {
					worklist.add(parent);
				}
			} 
		}	
	}













	// 2. Find the minimum key
	/**
	 * @Modifies_Everything
	 * 
	 * @Requires some this.nodes ;
	 * @Ensures ( some x: BinomialHeapNode | x in this.nodes && x.key == return
	 *          ) && ( all y : BinomialHeapNode | ( y in this.nodes && y!=return
	 *          ) => return <= y.key ) ;
	 */
	public int findMinimum() {
		return Nodes.findMinNode().key;
	}

	// 3. Unite two binomial heaps
	// helper procedure
	private void merge(/* @ nullable @ */BinomialHeapNode binHeap) {
		BinomialHeapNode temp1 = Nodes, temp2 = binHeap;
		while ((temp1 != null) && (temp2 != null)) {
			if (temp1.degree == temp2.degree) {
				BinomialHeapNode tmp = temp2;
				temp2 = temp2.sibling;
				tmp.sibling = temp1.sibling;
				temp1.sibling = tmp;
				temp1 = tmp.sibling;
			} else {
				if (temp1.degree < temp2.degree) {
					if ((temp1.sibling == null) || (temp1.sibling.degree > temp2.degree)) {
						BinomialHeapNode tmp = temp2;
						temp2 = temp2.sibling;
						tmp.sibling = temp1.sibling;
						temp1.sibling = tmp;
						temp1 = tmp.sibling;
					} else {
						temp1 = temp1.sibling;
					}
				} else {
					BinomialHeapNode tmp = temp1;
					temp1 = temp2;
					temp2 = temp2.sibling;
					temp1.sibling = tmp;
					if (tmp == Nodes) {
						Nodes = temp1;
					}
				}
			}
		}

		if (temp1 == null) {
			temp1 = Nodes;
			while (temp1.sibling != null) {
				temp1 = temp1.sibling;
			}
			temp1.sibling = temp2;
		}

	}

	// another helper procedure
	private void unionNodes(/* @ nullable @ */BinomialHeapNode binHeap) {
		merge(binHeap);

		BinomialHeapNode prevTemp = null, temp = Nodes, nextTemp = Nodes.sibling;

		while (nextTemp != null) {
			if ((temp.degree != nextTemp.degree) || ((nextTemp.sibling != null) && (nextTemp.sibling.degree == temp.degree))) {
				prevTemp = temp;
				temp = nextTemp;
			} else {
				if (temp.key <= nextTemp.key) {
					temp.sibling = nextTemp.sibling;
					nextTemp.parent = temp;
					nextTemp.sibling = temp.child;
					temp.child = nextTemp;
					temp.degree++;
				} else {
					if (prevTemp == null) {
						Nodes = nextTemp;
					} else {
						prevTemp.sibling = nextTemp;
					}
					temp.parent = nextTemp;
					temp.sibling = nextTemp.child;
					nextTemp.child = temp;
					nextTemp.degree++;
					temp = nextTemp;
				}
			}

			nextTemp = temp.sibling;
		}
	}

	// 4. Insert a node with a specific value
	/**
	 * @Modifies_Everything
	 * 
	 * @Ensures some n: BinomialHeapNode | ( n !in @old(this.nodes) &&
	 *          this.nodes = @old(this.nodes) @+ n && n.key = value ) ;
	 */
	public void insert(int value) {
		if (value > 0) {
			BinomialHeapNode temp = new BinomialHeapNode(value);
			if (Nodes == null) {
				Nodes = temp;
				size = 1;
			} else {
				unionNodes(temp);
				size++;
			}
		}
	}


	public/* @ nullable @ */BinomialHeapNode extractMinMutated() {
		if (Nodes == null)
			return null;

		BinomialHeapNode temp = Nodes, prevTemp = null;
		BinomialHeapNode minNode = null;

		minNode = Nodes.findMinNode();
		while (temp.key != minNode.key) {
			prevTemp = temp;
			temp = temp.sibling; 
		}

		if (prevTemp == null) {
			Nodes = temp.sibling;
		} else {
			prevTemp.sibling = temp.sibling;
		}
		temp = temp.child; 
		BinomialHeapNode fakeNode = prevTemp; //mutated temp into prevTemp
		while (temp != null) {
			temp.parent = null;
			temp = temp.sibling;
		}

		if ((Nodes == null) && (fakeNode == null)) {
			size = 0;
		} else {
			if ((Nodes == null) && (fakeNode != null)) {
				Nodes = fakeNode.reverse(null);
				size--;
			} else {
				if ((Nodes != null) && (fakeNode == null)) {
					size--;
				} else {
					unionNodes(fakeNode.reverse(null));
					size--; 
				}
			}
		}

		return minNode;
	}



	// 5. Extract the node with the minimum key
	/**
	 * @Modifies_Everything
	 * 
	 * @Ensures ( @old(this).@old(Nodes)==null => ( this.Nodes==null && return==null ) ) 
	 *       && ( @old(this).@old(Nodes)!=null => ( 
	 *               (return in @old(this.nodes)) && 
	 *               ( all y : BinomialHeapNode | ( y in @old(this.nodes.key) && y.key >= return.key ) ) && 
	 *               (this.nodes=@old(this.nodes) @- return ) && 
	 *               (this.nodes.key @+ return.key = @old(this.nodes.key) ) ));
	 */
	public/* @ nullable @ */BinomialHeapNode extractMin() {
		if (Nodes == null)
			return null;

		BinomialHeapNode temp = Nodes, prevTemp = null;
		BinomialHeapNode minNode = null;

		minNode = Nodes.findMinNode();
		while (temp.key != minNode.key) {
			prevTemp = temp;
			temp = temp.sibling;
		}

		if (prevTemp == null) {
			Nodes = temp.sibling;
		} else {
			prevTemp.sibling = temp.sibling;
		}
		temp = temp.child;
		BinomialHeapNode fakeNode = temp;
		while (temp != null) {
			temp.parent = null;
			temp = temp.sibling;
		}

		if ((Nodes == null) && (fakeNode == null)) {
			size = 0;
		} else {
			if ((Nodes == null) && (fakeNode != null)) {
				Nodes = fakeNode.reverse(null);
				size--;
			} else {
				if ((Nodes != null) && (fakeNode == null)) {
					size--;
				} else {
					unionNodes(fakeNode.reverse(null));
					size--;
				}
			}
		}

		return minNode;
	}



	// 6. Decrease a key value
	public void decreaseKeyValue(int old_value, int new_value) {
		BinomialHeapNode temp = Nodes.findANodeWithKey(old_value);
		decreaseKeyNode(temp, new_value);
	}

	/**
	 * 
	 * @Modifies_Everything
	 * 
	 * @Requires node in this.nodes && node.key >= new_value ;
	 * 
	 * @Ensures (some other: BinomialHeapNode | other in this.nodes &&
	 *          other!=node && @old(other.key)=@old(node.key)) ? this.nodes.key
	 *          = @old(this.nodes.key) @+ new_value : this.nodes.key =
	 * @old(this.nodes.key) @- @old(node.key) @+ new_value ;
	 */
	public void decreaseKeyNode(final BinomialHeapNode node, final int new_value) {
		if (node == null)
			return;

		BinomialHeapNode y = node;
		y.key = new_value;
		BinomialHeapNode z = node.parent;

		while ((z != null) && (node.key < z.key)) {
			int z_key = y.key;
			y.key = z.key;
			z.key = z_key;

			y = z;
			z = z.parent;
		}
	}

	// 7. Delete a node with a certain key
	public void delete(int value) {
		if ((Nodes != null) && (Nodes.findANodeWithKey(value) != null)) {
			decreaseKeyValue(value, findMinimum() - 1);
			extractMin();
		}
	}


	public void dumpStructure(BinomialHeapNode root) {
	}

	public void countStructure(BinomialHeapNode root) {
	}



	//	private static final int LIMIT = 10;
	//
	//	public static void main(String[] args) throws Exception {
	//		BinomialHeap X = new BinomialHeap();
	//
	////		X = (BinomialHeap) Debug.makeSymbolicRef("X", X);
	//		X = (BinomialHeap) Debug.makeSymbolicRefBounded("X", X);
	//		if (X != null){
	//			X.bfsTraverse(X.Nodes);
	//			X.dumpStructure(X.Nodes);
	//		}
	//	}


	//	public static void main(String[] args) {
	//		BinomialHeap b = new BinomialHeap();
	//		BinomialHeapNode n246 = new BinomialHeapNode();
	//		BinomialHeapNode n374 = new BinomialHeapNode();
	//		BinomialHeapNode n384 = new BinomialHeapNode();
	//		
	//		
	//		b.Nodes = n246;
	//		b.size = BinomialHeap.SYMBOLICINT;
	//	
	//		n246.child = n374;
	//		n246.degree = BinomialHeapNode.SYMBOLICINT;
	//		n246.key = BinomialHeapNode.SYMBOLICINT;
	//		n246.parent = BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE;
	//		n246.sibling = null;
	//		
	//		n374.child = BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE;
	//		n374.degree = BinomialHeapNode.SYMBOLICINT;
	//		n374.key = BinomialHeapNode.SYMBOLICINT;
	//		n374.parent = BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE;
	//		n374.sibling = n384;
	//		
	//		n384.child = null;
	//		n384.degree = BinomialHeapNode.SYMBOLICINT;
	//		n384.key = BinomialHeapNode.SYMBOLICINT;
	//		n384.parent = BinomialHeapNode.SYMBOLICBINOMIALHEAPNODE;
	//		n384.sibling = null;
	//		
	//
	//		boolean boo = b.hybridRepOK();
	//		System.out.println(boo);
	//		
	//
	//		
	//		
	//		
	//
	//		
	//	}




	public int numNodes(){
		BinomialHeapNode root = Nodes;
		int amount = 0;
		HashSet<BinomialHeapNode> visited = new HashSet<BinomialHeapNode>();
		LinkedList<BinomialHeapNode> pending = new LinkedList<BinomialHeapNode>();
		if (root != null){
			visited.add(root);
			pending.add(root);
		}

		while (!pending.isEmpty()){
			BinomialHeapNode n = pending.removeFirst();
			amount++;
			if (n.sibling != null && visited.add(n.sibling)){
				pending.add(n.sibling);
			}
			if (n.child != null && visited.add(n.child)){
				pending.add(n.child);
			}
		}

		return amount;
	}




	public static BinomialHeap makeFault() {
		BinomialHeap B = new BinomialHeap();
		BinomialHeapNode n0 = new BinomialHeapNode();
		BinomialHeapNode n1 = new BinomialHeapNode();
		BinomialHeapNode n2 = new BinomialHeapNode();
		BinomialHeapNode n3 = new BinomialHeapNode();
		BinomialHeapNode n4 = new BinomialHeapNode();
		BinomialHeapNode n5 = new BinomialHeapNode();
		BinomialHeapNode n6 = new BinomialHeapNode();
		BinomialHeapNode n7 = new BinomialHeapNode();
		BinomialHeapNode n8 = new BinomialHeapNode();
		BinomialHeapNode n9 = new BinomialHeapNode();
		BinomialHeapNode n10 = new BinomialHeapNode();
		BinomialHeapNode n11 = new BinomialHeapNode();
		BinomialHeapNode n12 = new BinomialHeapNode();

		B.Nodes = n0;

		n0.child = null;
		n0.degree = 0;
		n0.key = 14;
		n0.parent = null;
		n0.sibling = n1;

		n1.child = n3;
		n1.degree = 2;
		n1.key = 14;
		n1.parent = null;
		n1.sibling = n2;

		n2.child = n4;
		n2.degree = 3;
		n2.key = 13;
		n2.parent = null;
		n2.sibling = null;

		n3.child = n6;
		n3.degree = 1;
		n3.key = 14;
		n3.parent = n1;
		n3.sibling = n5;

		n4.child = n8;
		n4.degree = 2;
		n4.key = 14;
		n4.parent = n2;
		n4.sibling = n7;

		n5.child = null;
		n5.degree = 0;
		n5.key = 14;
		n5.parent = n1;
		n5.sibling = null;

		n6.child = null;
		n6.degree = 0;
		n6.key = 14;
		n6.parent = n3;
		n6.sibling = null;

		n7.child = n10;
		n7.degree = 1;
		n7.key = 13;
		n7.parent = n2;
		n7.sibling = n9;

		n8.child = n12;
		n8.degree = 1;
		n8.key = 14;
		n8.parent = n4;
		n8.sibling = n11;

		n9.child = null;
		n9.degree = 0;
		n9.key = 13;
		n9.parent = n2;
		n9.sibling = null;

		n10.child = null;
		n10.degree = 0;
		n10.key = 13;
		n10.parent = n7;
		n10.sibling = null;

		n11.child = null;
		n11.degree = 0;
		n11.key = 14;
		n11.parent = n4;
		n11.sibling = null;

		n12.child = null;
		n12.degree = 0;
		n12.key = 14;
		n12.parent = n8;
		n12.sibling = null;
		B.size = 13;

		B.extractMin();
		return B;
	}


		private static int LIMIT = 5;
		public static void main(String[] args) {

			BinomialHeap BH0 = new BinomialHeap();
			BH0 = (BinomialHeap) DebugBounded.makeSymbolicRef("BH0", BH0);
			BinomialHeap backupBH0 = BH0;
			if (BH0 != null && BH0.repOK_Concrete()) {
				//			try {
				int theSize = BH0.size;
				BinomialHeapNode N0 = BH0.extractMin();
			}

		}


//	private static int LIMIT = 10;
//
//	public static void main(String[] args) {
//		BinomialHeap BH0 = new BinomialHeap();
//		//				BH0 = (BinomialHeap) Debug.makeSymbolicRef("BH0", BH0);
//		BH0 = (BinomialHeap) Debug.makeSymbolicRefBounded("BH0", BH0);
//
//		if (BH0 != null ) {
////			try {
//				//			BinomialHeapNode N0 = BH0.extractMin();
//			BH0.dumpStructure(BH0.Nodes);
//				BH0.bfsTraverse(BH0.Nodes);
//				BH0.countStructure(BH0.Nodes);
////			} catch (Exception e) {}
//		}
//
//	}

	private static void setCurrentStateToInputState() {
		// TODO Auto-generated method stub

	}



	private static void dumpRootStructure() {
		// TODO Auto-generated method stub

	}


}



